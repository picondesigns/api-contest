$itg_version = '1.5'
Write-Host "***IT-Glue API Integration Script (ver. $itg_version) by Picon Designs, LLC. Copyright (c) 2019.***`n---Unauthorized use or distribution of this script is prohibited.---`n"
if ($PSVersionTable.PSVersion.Major -lt 3) {
    Write-Host "`n>>>ERROR: Powershell version 3 or higher is required to run the IT-Glue Documentation Script. Aborting Script."
    break
}

#IT-Glue Connection Information
$input_APIKey = ''
$input_OrgID = ''
$input_LocName = ''

#IT-Glue Object names, set object name to match IT Glue object, leave blank to ignore.
$itgAsset_FileShares = "File Sharing"
$itgAsset_ActiveDirectory = "Active Directory"
$itgAsset_Printing = "Printing"
$itgAsset_LANS = "LAN"
$itgAsset_WANS = "Internet/WAN"
$itgAsset_Applications = "Applications"
$itgAsset_ADGroups = "Security Groups"
$itgAsset_GPOs = "Group Policy"
$itgAsset_BitLocker = "BitLocker"
$itgAsset_ADPasswordPolicy = "Password Policy"
$itgAsset_Licenses = "Licensing"

#IT-Glue Object Field Configuration
$itgFields_ConfigStatus = 'Active'
$itgFields_FileSharesPermField = 'share-permissions'

$itgFields_FileShares = @{
    'name' = 'share-name'
    'description' = 'share-description'
    'servers' = 'servers'
    'diskpath' = 'disk-path'
    'path' = 'share-path'
    'permissions' = $itgFields_FileSharesPermField
}
$itgFields_ActiveDirectory = @{
    'shortname' = 'ad-short-name'
    'fullname' = 'ad-full-name'
    'servers' = 'ad-servers'
    'adlevel' = 'ad-level'
    'dhcpservers' = 'dhcp-servers'
    'notes' = 'notes'
}
$itgFields_Printing = @{
    'sharename' = 'printer-share-name'
    'location' = 'site'
    'servers' = 'print-server-s'
    'printers' = 'printer-s'
    'notes' = 'notes'
    'published' = 'published-to-ad'
    'ipaddress' = 'printer-ip-address'
}
$itgFields_LANS = @{
    'name' = 'name'
    'subnet' = 'subnet'
    'dhcpserver' = 'dhcp-server'
    'dhcpscope' = 'dhcp-scope'
}
$itgFields_WANS = @{
    'provider' = 'provider'
    'location' = 'location-s'
    'download' = 'download-speed-mbps'
    'linktype' = 'link-type'
    'publicip' = 'ip-address-es'
}
$itgFields_Applications = @{
    'name' = 'name'
    'version' = 'version'
    'computer' = 'application-workstation-s'
}
$itgFields_ADGroups = @{
    'name' = 'name'
    'domain' = 'domain'
    'members' = 'members'
    'groups' = 'security-groups'
    'missing' = 'missing-contacts'
}
$itgFields_GPOs = @{
    'name' = 'name'
    'description' = 'description'
    'report' = 'gpo-report'
    'notes' = 'notes'
    'groups' = 'security-groups'
}
$itgFields_BitLocker = @{
    'mountpoint' = 'mount-point'
    'volumetype' = 'volume-type'
    'autounlock' = 'autounlock-enabled'
    'password' = 'recovery-password'
    'computer' = 'computer'
}
$itgFields_ADPasswordPolicy = @{
    'name' = 'policy-name'
    'domain' = 'domain'
    'complexity' = 'require-complexity'
    'maxage' = 'maximum-age'
    'minage' = 'minimum-age'
    'minlength' = 'minimum-length'
    'historycount' = 'history-count'
    'maxtrys' = 'maximum-trys'
    'lockout' = 'lockout-duration'
}
$itgFields_Licenses = @{
    'manufacturer' = 'manufacturer'
    'name' = 'name'
    'version' = 'version'
    'license' = 'license-key-s'
    'notes' = 'additional-notes'
}

#IT-Glue Applications Configuration
$itgApps_Include = @("Barracuda Backup Agent","Microsoft Azure AD Connect","Barracuda Backup Agent MSI","Microsoft Online Services Sign-in Assistant","Microsoft Azure AD Connect Health agent for sync","Microsoft Azure AD Connect synchronization services","Lenovo ThinkServer System Manager Command Line Interface","FMAudit Onsite","Ubiquiti UniFi (remove only)","PowerChute Business Edition Console","PowerChute Business Edition Server","PowerChute Business Edition Agent","MegaRAID Storage Manager v14.02.01.03","Windows Software Probe","Sage","Timberline","Quickbooks","Great Plains","Solidworks","Bluebeam","Viewpoint","Papercut","Crystal Reports","Sharepoint","Microsoft Dynamics","Adobe Acrobat","Shortel","Salesforce")

#Script Configuration
$syslog = [Environment]::GetFolderPath("Windows") + "\temp\itgluelog.log"

#Initalizing IT-Glue Connection Settings
$ITGlue_APIKey = ConvertTo-SecureString $input_APIKey -AsPlainText -Force
$ITGlue_Headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$ITGlue_BaseURI = "http://api.itglue.com"
$ITGlueOrgID = $input_OrgID
$ITGlueLocName = $input_LocName

#System Functions
function sysError {
    Param (
        [Parameter(Mandatory = $true)]$errmsg
    )
    sysLog -category "SYSERROR" -message $errmsg -display $true
    break
}
function sysLog {
    Param (
        [Parameter(Mandatory = $true)]$message,
        [Parameter(Mandatory = $true)]$category,
        [Parameter(Mandatory = $false)]$display = $false
    )
    $string = "["+(Get-Date -Format g)+"] " + "[$category] $message"
    if($display -eq $true) {write-host $message}
    Out-File -FilePath $syslog -InputObject $string -Append
    Return
}
function RestOp {
    Param (
        [Parameter(Mandatory = $true)]$data,
        [Parameter(Mandatory = $true)]$resource_url,
        [Parameter(Mandatory = $true)]$method
    )
    if ($data.GetType() -eq [System.Collections.Hashtable]) {
        $datacvt = $data.GetEnumerator()  | % { "$($_.Name)=$($_.Value)" }
    } else {
        $datacvt = $data
    }
    $ITGlue_Headers.Add('x-api-key', (New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList 'N/A', $ITGlue_APIKey).GetNetworkCredential().Password)
    sysLog -category 'RESTOPSEND' -message "-method $method -uri ($ITGlue_BaseURI + $resource_url) -body $datacvt"
    Try {
        $rest_output = Invoke-RestMethod -method $method -uri ($ITGlue_BaseURI + $resource_url) -headers $ITGlue_Headers -ContentType "application/vnd.api+json" -body $data -ErrorAction Continue
        SysLog -category 'RESTOPRCV' -message $rest_output
    } Catch {
        SysLog -category 'WEBERROR' -message "The Invoke-RestMethod encountered an error: $($_.Exception.Message)." -display $true
    }
    $ITGlue_Headers.Remove('x-api-key') >$null
    $rest_data = @{}
    $rest_data = $rest_output
    return $rest_data
}
function ConvertFrom-Json20([object] $item){ 
    add-type -assembly system.web.extensions
    $ps_js=new-object system.web.script.serialization.javascriptSerializer
    return ,$ps_js.DeserializeObject($item)
}
function ConvertTo-Base64 {
    Param (
        [Parameter(Mandatory = $true)]$content
    )
    $ContentBytes = [System.Text.Encoding]::UTF8.GetBytes($content)
    return [System.Convert]::ToBase64String($ContentBytes)
}
function Convert-Subnet {
    Param (
        [Parameter(Mandatory = $true)]$SubnetMask
    )
    $SubnetMask = $SubnetMask.ToString()
    $PrefixArray=@() 
    $PrefixLength = 0 
    $ByteArray = $SubnetMask.Split(".") 
    for($byteCount = 0; $byteCount-lt 4; $byteCount++) { 
        $bitVariable = $ByteArray[$byteCount] 
        $bitVariable = [Convert]::ToString($bitVariable, 2) 
          
        if($bitVariable.Length -lt 8) { 
            $NumOnes=$bitVariable.Length 
            $NumZeroes=8-$bitVariable.Length 
            for($bitCount=0; $bitCount -lt $NumZeroes; $bitCount++) { 
                $Temp=$Temp+"0" 
            } 
            $bitVariable=$Temp+$bitVariable 
        } 
        for($bitCount=0; $bitCount -lt 8; $bitCount++) { 
            if ($bitVariable[$bitCount] -eq "1") { 
                $PrefixLength++  
            } 
            $PrefixArray=$PrefixArray + ($bitVariable[$bitCount]) 
        } 
    } 
    $Mark=$False 
    foreach ($bit in $PrefixArray) { 
        if($bit -eq "0") { 
            if($Mark -eq $False) { 
                $Mark=$True 
            } 
        } 
        if($bit -eq "1") { 
            if($Mark -eq $True) { 
                Write-Host "Invalid Input. Please enter a properly formatted subnet mask." 
                Exit(1) 
            }     
        }
    } 
    Return $PrefixLength
}
function Speed-Test {
    sysLog -category "MESSAGE" -display $true -message "Performing internet upload speed test."
    $Url = "http://client.akamai.com/install/test-objects/50MB.bin" 
    $Path = "Out-Null" 
    $WebClient = New-Object System.Net.WebClient 
    $Request=Get-Date; $WebClient.DownloadFile( $url, $path ) 
    $speed = "{0:N2}" -f ((50/(Measure-Command {$Request=Get-Date; $WebClient.DownloadFile( $url, $path )}).TotalSeconds)*8)
    sysLog -category "MESSAGE" -display $true -message "Download speed measured at $speed mbps."
    Return $speed
}
function ConvertToKey($Key) {
	$Keyoffset = 52 
	$isWin8 = [int]($Key[66]/6) -band 1
	$HF7 = 0xF7
	$Key[66] = ($Key[66] -band $HF7) -bOr (($isWin8 -band 2) * 4)
	$i = 24
	[String]$Chars = "BCDFGHJKMPQRTVWXY2346789"	
	do {
        $Cur = 0 
		$X = 14
		Do {
			$Cur = $Cur * 256    
			$Cur = $Key[$X + $Keyoffset] + $Cur
			$Key[$X + $Keyoffset] = [math]::Floor([double]($Cur/24))
			$Cur = $Cur % 24
			$X = $X - 1 
		} while ($X -ge 0)
		$i = $i- 1
		$KeyOutput = $Chars.SubString($Cur,1) + $KeyOutput
		$last = $Cur
	} while ($i -ge 0)
	$Keypart1 = $KeyOutput.SubString(1,$last)
	$Keypart2 = $KeyOutput.Substring(1,$KeyOutput.length-1)
	if($last -eq 0 ) {
		$KeyOutput = "N" + $Keypart2
	} else {
		$KeyOutput = $Keypart2.Insert($Keypart2.IndexOf($Keypart1)+$Keypart1.length,"N")
	}
	$a = $KeyOutput.Substring(0,5)
	$b = $KeyOutput.substring(5,5)
	$c = $KeyOutput.substring(10,5)
	$d = $KeyOutput.substring(15,5)
	$e = $KeyOutput.substring(20,5)
	$keyproduct = $a + "-" + $b + "-"+ $c + "-"+ $d + "-"+ $e
	return $keyproduct
}
function dataAppend {
    Param (
        [Parameter(Mandatory = $true)]$originalString,
        [Parameter(Mandatory = $true)]$newString
    )
    $originalString = $originalString -replace $newString,''
    $newString = $originalString + "`n" + $newString
    return $newString
}

#Validation Functions
function validateOrgID {
    $rest_body = @{'filter[id]' = "$input_OrgID"}
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/organizations/'
    return ($rest_rtn.data.attributes.name)
}
function getMainLocationID {
    $rest_body = @{'filter[name]' = ""}
    $restObjs = RestOp -data $rest_body -method 'GET' -resource_url (('/organizations/{0}/relationships' -f $ITGlueOrgID) + ('/locations/'))
    foreach ($restObj in $restObjs.data) {
        if ($restObj.attributes.name -eq $ITGlueLocName){$rest_rtn = $restObj.id}
    }
    return $rest_rtn
}
function validateFlexibleAssetFields {
    Param (
        [Parameter(Mandatory = $true)]$fields,
        [Parameter(Mandatory = $true)]$assetname
    )
    sysLog -category "MESSAGE" -message "Verifying Flexible Asset Fields for $assetname." -display $true
    $assetid = Get-ITGFlexibleAssetTypeID -GetName $assetname
    $return = @()
    If ($assetid -ne $null) {
        $rest_body = @{'filter[name]' = "$GetName"}
        $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url ('/flexible_asset_types/{0}/relationships/flexible_asset_fields/' -f $assetid) -ErrorAction SilentlyContinue
        $xfields = $rest_rtn.data.attributes.'name-key'
        foreach ($field in $fields.Values) {if (!$xfields.Contains($field)) { $return += $field }}
    } else {
        $return += "Unable to find Flexible Asset named $assetname."
        sysLog -category "MESSAGE" -message "Unable to find Flexible Asset named $assetname." -display $true
    }
    If ($return) {
        sysLog -category "MESSAGE" -message ">> Missing the following Flexible Asset fields for $($assetname): $($return -join ', ')" -display $true
    }
    return $return
}

#IT-Glue Functions
function Get-ITGConfigStatusID {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup Config Status ID for $GetName."
    $rest_body = @{'filter[name]' = "$GetName"}
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/configuration_statuses/'
    return $rest_rtn.data.id
}
function Get-ITGContact {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup Contact ID for $GetName."
    if (!($Global:orgContacts)) {
        $rest_body = @{'filter[name]' = "$GetName"}
        $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url ('/organizations/{0}/relationships/contacts' -f $Global:ITGlueOrgID)
        $Global:orgContacts = $rest_rtn.data
    }
    $return = 0
    foreach($contact in $Global:orgContacts) {
        if ($GetName -eq $contact.attributes.name) {
            $return = $contact.id
        }
    }
    return $return
}
function Get-ITGFlexibleAssetTypeID {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup Asset ID for $GetName."
    $rest_body = @{'filter[name]' = "$GetName"}
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/flexible_asset_types/'
    return $rest_rtn.data.id
}
function Get-ITGConfigTypeID {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup Config Type ID for $GetName."
    $rest_body = @{'filter[name]' = "$GetName"}
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/configuration_types/'
    return $rest_rtn.data.id
}
function Get-ITGMftID {
    Param (
        [Parameter(Mandatory = $true)]$GetName,
        [Parameter(Mandatory = $false)][boolean]$CreateNew = $false
    )
    sysLog -category 'DEBUG' -message "Lookup Mft ID for $GetName."
    $rest_body = @{'filter[name]' = "$GetName"}
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/manufacturers/'
    if (!$rest_rtn.data.id -and $CreateNew) {
        $rest_body = '{"data": {"type": "manufacturers","attributes": {"name": "'+$GetName+'"}}}'
        $rest_rtn = RestOp -data $rest_body -method 'POST' -resource_url '/manufacturers/'
    }
    foreach ($item in $rest_rtn.data) {
        $return = $item.id
    }
    return $return
}
function Get-ITGModelID {
    Param (
        [Parameter(Mandatory = $true)]$GetName,
        [Parameter(Mandatory = $true)]$MftID,
        [Parameter(Mandatory = $false)][boolean]$CreateNew = $false
    )
    sysLog -category 'DEBUG' -message "Lookup Model ID for $GetName."
    $rest_body = @{
                    'filter[name]' = $GetName
                    'page[size]' = 99999}
    $modObjs = RestOp -data $rest_body -method 'GET' -resource_url ('/manufacturers/{0}/relationships/models/' -f $MftID)
    foreach ($modObj in $modObjs.data) {
        $modObjName = $modObj.attributes.name
        if ($GetName -like "*$modObjName*") {$rest_rtn = $modObj.id}
    }
    if (!$rest_rtn -and $CreateNew) {
        $rest_body = '{"data": {"type": "models","attributes": {"name": "'+$GetName+'","manufacturer-id": '+$MftID+'}}}'
        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url ('/manufacturers/{0}/relationships/models/' -f $MftID)
        $rest_rtn = $rest_cr.data.id
    }
    return $rest_rtn
}
function Get-ITGConfigID {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup Configuration ID for $GetName."
    $rest_body = @{
        'filter[name]' = "$GetName"
        'filter[organization-id]' = $ITGlueOrgID
        'filter[configuration-status-id]' = (Get-ITGConfigStatusID -GetName $Global:itgFields_ConfigStatus)
    }
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url '/configurations/'
    $rtnID = 0
    $return = @{}
    $return.id = 0
    [datetime]$lstdate = '2000-01-01'
    foreach($obj in $rest_rtn.data) {
        [datetime]$updated = $obj.attributes.'updated-at'
        if ($updated -gt $lstdate) {
            $return.id = $obj.id
            $return.synced = $obj.attributes.'psa-integration'
        }
        $lstdate = $updated
    }
    return $return
}
function Get-ITGOSID {
    Param (
        [Parameter(Mandatory = $false)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup OS ID for $GetName."
    $rest_body = @{
        'filter[name]' = ""
        'page[size]' = 5000
    }
    $restObjs = RestOp -data $rest_body -method 'GET' -resource_url '/operating_systems/'
    foreach ($restObj in $restObjs.data) {
        $restObjName = $restObj.attributes.name
        if ($GetName -like "*$restObjName*") {$rest_rtn = $restObj.id}
    }
    return $rest_rtn
}
function Get-ITGLans {
    Param (
        [Parameter(Mandatory = $true)]$GetName
    )
    sysLog -category 'DEBUG' -message "Lookup LAN ID for $GetName."
    $AssetType = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_LANS
    $rest_body = @{
        'filter[organization_id]' = $ITGlueOrgID
        'filter[flexible_asset_type_id]' = $AssetType
    }
    $rsu = '/flexible_assets/'
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url $rsu
    $return = 0
    foreach ($asset in $rest_rtn.data) {
        If ($asset.attributes.name -eq $GetName) { $return = $asset.id }
    }
    return $return
}
function Get-ITGFlexSearch {
    Param (
        [Parameter(Mandatory = $true)]$GetName,
        [Parameter(Mandatory = $true)]$AssetType,
        [Parameter(Mandatory = $false)]$filter = 'name'
    )
    sysLog -category 'DEBUG' -message "Lookup Flexible Asset ID for $GetName by $filter with asset type id $AssetName."
    $rest_body = @{
        "filter[$filter]" = $GetName
        'filter[organization_id]' = $ITGlueOrgID
        'filter[flexible_asset_type_id]' = $AssetType
    }
    $rsu = '/flexible_assets/'
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url $rsu
    return $rest_rtn.data.id
}
function Get-ITGFlexDetails {
    Param (
        [Parameter(Mandatory = $true)]$ID,
        [Parameter(Mandatory = $true)]$AssetType
    )
    sysLog -category 'DEBUG' -message "Lookup Flexible Asset ID for $GetName by $filter with asset type id $AssetName."
    $rest_body = @{
        'filter[flexible_asset_type_id]' = $AssetType
    }
    $rsu = '/flexible_assets/{0}' -f $ID
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url $rsu
    return $rest_rtn.data.attributes
}
function Get-ITGTagsToAdd {
    Param (
        [Parameter(Mandatory = $true)]$GetName,
        [Parameter(Mandatory = $true)]$AssetType,
        [Parameter(Mandatory = $false)]$filter = 'name',
        [Parameter(Mandatory = $true)]$field,
        [Parameter(Mandatory = $true)]$tag
    )
    $rest_body = @{
        "filter[$filter]" = $GetName
        'filter[organization_id]' = $ITGlueOrgID
        'filter[flexible_asset_type_id]' = $AssetType
    }
    $rsu = '/flexible_assets/'
    $rest_rtn = RestOp -data $rest_body -method 'GET' -resource_url $rsu
    $cTags = $rest_rtn.data.attributes.traits."$field".values.id
    If ($cTags) {
        If ($tag -notin $cTags) {
            $cTags += $tag
        }
        return $cTags -join ','
    } else {
        return $null
    }
}

#Upload Functions
function Upload-Config {
    sysLog -category "MESSAGE" -display $true -message "---Uploading Computer Configuration Data to IT-Glue ---"
    #Get System Name and Manfucaturer
    $cimObj = Get-CimInstance -ClassName Win32_ComputerSystem
    $Global:sysName = $cimObj.Name
    If ($cimObj.Manufacturer) {$Global:sysMft = $($cimObj.Manufacturer).Trim()} else {$Global:sysMft = "Unknown"}
    If ($cimObj.Model) {$Global:sysMod = $($cimObj.Model).Trim()} else {$Global:sysMod = "Unknown"}
    $Global:sysMftID = Get-ITGMftID -GetName $sysMft -CreateNew $true
    $Global:sysModID = Get-ITGModelID -GetName $sysMod -CreateNew $true -MftID $sysMftID
    sysLog -category "MESSAGE" -display $true -message "Detected computer: $Global:sysName ($Global:sysMft - $Global:sysMod)"

    #Get Windows OS Information
    $wimObj =Get-WmiObject -Class Win32_OperatingSystem
    $Global:sysOS = $($wimObj.Caption).Trim()
    if ($Global:sysOS -notlike '*Server*') {
        $Global:sysType = "Workstation"
        $Global:sysServer = $false
    }
    $Global:sysTypeID = Get-ITGConfigTypeID -GetName $Global:sysType
    sysLog -category "MESSAGE" -display $true -message "Computer is a $Global:sysType running $Global:sysOS with an IT-Glue Configuration type id of $Global:sysTypeID."

    #Get BIOS Information
    $cimObj = Get-CimInstance -ClassName Win32_Bios
    $Global:sysSerial = $($cimObj.SerialNumber).Trim()
    sysLog -category "MESSAGE" -display $true -message "Computer serial number is $Global:sysSerial."

    #Get Network Information
    if ($Global:sysOSVer.Major -lt 7 -and $Global:sysOSVer.Minor -lt 2) {
        $netObj = gwmi win32_networkadapterconfiguration | Where-Object {$_.IPAddress -ne $null}
        $propMac = (gwmi win32_networkadapter | Where-Object {$_.deviceid -eq $netObj.Index}).MACAddress
        $propIP = $netObj.IPAddress
        If ($propIP.getType().IsArray) {
            $propIP = $propIP[0]
        } else {
            $propIP = $propIP
        }
        $propGW = $netObj.DefaultIPGateway
    } else {
        $netObj = (Get-NetIPConfiguration | Where-Object {$_.IPv4DefaultGateway -ne $null -and $_.NetAdapter.Status -ne "Disconnected"})
        $propMac = (Get-NetAdapter | Where ifIndex -eq $netObj.InterfaceIndex | Select MacAddress).MacAddress
        $propIP = $netObj.IPv4Address.IPAddress
        If ($propIP.GetType().Name -eq "Object[]") {
            $propIP = $propIP[0]
        } else {
            $propIP = $propIP
        }
        foreach($route in $netObj.IPv4DefaultGateway) {
            $propGW += $route.NextHop + ","
        }
        $propGW = $propGW.SubString(0,$propGW.Length-1)
    }
    sysLog -category "MESSAGE" -display $true -message "Computer has an IPv4 Address of $propIP with a Gateway of $propGW."

    #Send Data to IT-Glue API
    $getconfid = Get-ITGConfigID -GetName $Global:sysName
    $existid = $getconfid.id
    sysLog -category "MESSAGE" -display $true -message "Sending data to IT-Glue API: MftID $Global:sysMftID, ModID $Global:sysModID and existing $existid."
    $rest_cr = ''
    $rest_body = '{"data": {"type": "configurations","attributes": {"name": "'+$Global:sysName+'","configuration-type-id": '+$Global:sysTypeID+',"configuration-status-id": '+$ITGlue_CfgStatID+',"manufacturer-id": '+$sysMftID+',"model-id": '+$sysModID+',"operating-system-id": '+(Get-ITGOSID -GetName $sysOS)+',"serial-number": "'+$sysSerial+'","hostname": "'+$sysFQDN+'","primary-ip": "'+$propIP+'","default-gateway": "'+$propGW+'","mac-address": "'+$propMAC+'","location-id": '+$ITGlue_LocID+'}}}'
        
    if (!$existid) {
        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url ('/organizations/{0}/relationships/configurations' -f $ITGlueOrgID)
        $rest_rtn = $rest_cr.data.id
        sysLog -category "MESSAGE" -display $true -message "Finishing creating the configuration in IT-Glue with id $rest_rtn."
    } else {
        $rest_rtn = $existid
        if ($getconfid.synced) {
            sysLog -category "MESSAGE" -display $true -message "A PSA synced Configuration already exists in IT-Glue with id $rest_rtn."
        } else {
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url ('/organizations/{0}/relationships/configurations/{1}' -f $ITGlueOrgID,$existid)
            sysLog -category "MESSAGE" -display $true -message "The Configuration already exists in IT-Glue with id $rest_rtn."
        }
    }
    return $rest_rtn
}
function Upload-FileShares {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading System Fire Share Data to IT-Glue ---"
    $assettypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_FileShares)
    $shares = gwmi -Class win32_share | Where-Object {$_.Name -notlike '*$' -and $_.Type -eq 0}
    foreach ($share in $shares) {
        $name = $share.Name
        $sharesec = Get-WmiObject -Class Win32_LogicalShareSecuritySetting -Filter "name='$name'"
        $secdesc = $sharesec.GetSecurityDescriptor().Descriptor
        $path = "\\\\$sysName\\$name"
        $local = $share.Path.Replace("\","\\")
        $permissions = ''
        foreach ($ace in $secdesc.DACL) {
            $UserName = $ace.Trustee.Name
            If ($ace.Trustee.Domain -ne $Null) {$UserName = "$($ace.Trustee.Domain)\$UserName"}    
            If ($ace.Trustee.Name -eq $Null) {$UserName = $ace.Trustee.SIDString }   
            
            [Array]$ACL += New-Object Security.AccessControl.FileSystemAccessRule($UserName, $ace.AccessMask, $ace.AceType)
            if ($permissions -eq '') {
                $permissions = "$($ACL.IdentityReference) ($($ACL.AccessControlType) - $($ACL.FileSystemRights))"
            } else {
                $permissions = $permissions + ', ' + "$($ACL.IdentityReference) ($($ACL.AccessControlType) - $($ACL.FileSystemRights))"
            }
            $ACL.Clear()
        }
        sysLog -category "MESSAGE" -display $true -message "Uploading share information for $name with a path of $path and permissions of $permissions."
        $rest_cr = ''
        $existing = Get-ITGFlexSearch -GetName $name -AssetType $assettypeid
        $permissions = $permissions.Replace('\','\\')
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_FileShares.name+'": "'+$name+'","'+$itgFields_FileShares.description+'": "'+($share.Description)+'","'+$itgFields_FileShares.servers+'": ['+$Global:sysID+'],"'+$itgFields_FileShares.diskpath+'":"'+$local+'","'+$itgFields_FileShares.path+'": "'+$path+'","'+$itgFields_FileShares.permissions+'": "'+$permissions+'"}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
        }
    }
}
function Upload-LocalPrinters {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading Local USB Printers to IT-Glue ---"
    $psObjs = gwmi win32_printer | Where-Object {$_.Shared -eq $false -and $_.PortName -like "USB*"} | Select-Object Name,PortName,DriverName,Shared
    $sysTypeID =  Get-ITGConfigTypeID -GetName "Printer"
    foreach ($psObj in $psObjs) {
        $rest_cr = ''
        $psDriver = $psObj.DriverName
        $psPort = $psObj.PortName
        $printerNotes = "Found on $Global:sysName with print driver: $psDriver on port $psPort"
        sysLog -category "MESSAGE" -display $true -message "Local USB printer $($psObj.Name) $printerNotes"
        $existing = Get-ITGConfigID -GetName $psObj.Name
        $rest_body = '{"data": {"type": "configurations","attributes": {"name": "'+($psObj.Name)+'","configuration-type-id": '+$sysTypeID+',"configuration-status-id": '+$Global:ITGlue_CfgStatID+',"location-id": '+$Global:ITGlue_LocID+',"notes":"'+$printerNotes+'"}}}'
        if ($existing.id) {
            if (!$existing.synced) {
                $resource_uri = ('/organizations/{0}/relationships/configurations/{1}' -f $ITGlueOrgID, $existing.id)
                $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
            } else {
                $rest_cr.data.id = $existing.id
            }
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url ('/organizations/{0}/relationships/configurations' -f $ITGlueOrgID)
        }
        $rest_rtn = $rest_cr.data.id
    }
}
function Upload-Software {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading Software Application Data ---"
    $paths  = @("HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*","HKLM:SOFTWARE\Wow6432node\Microsoft\Windows\CurrentVersion\Uninstall\*")
    $assettypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_Applications)
    foreach ($path in $paths) {
        $keys = Get-ItemProperty -Path $path
        foreach ($key in $keys) {
            foreach ($appname in $itgApps_Include) {
                if ($key.DisplayName -like $appname) {
                    $ITGlueName = "$($key.DisplayName) $($key.DisplayVersion)"
                    $existing = Get-ITGFlexSearch -GetName $ITGlueName -AssetType $assettypeid
                    if (!$existing) {
                        sysLog -category "MESSAGE" -display $true -message "Uploading application information for $($key.DisplayName)."
                        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_Applications.name+'": "'+$key.DisplayName+'","'+$itgFields_Applications.version+'": "'+$key.DisplayVersion+'","'+$itgFields_Applications.computer+'": ['+$Global:sysID+']}}}}'
                        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
                    } else {
                        sysLog -category "MESSAGE" -display $true -message "Updating application information for $($key.DisplayName)."
                        $installedon = Get-ITGTagsToAdd -GetName $ITGlueName -AssetType $assettypeid -field $itgFields_Applications.computer -tag $Global:sysID
                        $resource_uri = ('/flexible_assets/{0}' -f $existing)
                        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_Applications.name+'": "'+$key.DisplayName+'","'+$itgFields_Applications.computer+'": ['+$installedon+']}}}}'
                        $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
                    }
                }
            }
        }
    }
}
function Upload-Printers {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading Shared Printers to IT-Glue ---"
    $printers = gwmi win32_printer | Where-Object {$_.Shared -eq $false -and $_.PortName -like "USB*"} | Select-Object Name,PortName,DriverName,Shared
    $sysTypeID =  Get-ITGConfigTypeID -GetName "Printer"
    foreach ($printer in $printers) {
        sysLog -category "MESSAGE" -display $true -message "Found printer $($printer.Name) and uploading to IT-Glue configurations."
        $prtExists = Get-ITGConfigID -GetName $printer.Name
        $prt_rest = ''
        $prtNotes = "Found $($printer.name) with print driver: $($printer.DriverName) on port $($printer.PortName)"
        $prt_body = '{"data": {"type": "configurations","attributes": {"name": "'+($printer.Name)+'","configuration-type-id": '+$sysTypeID+',"configuration-status-id": '+$Global:ITGlue_CfgStatID+',"location-id": '+$Global:ITGlue_LocID+',"notes":"'+$prtNotes+'"}}}'
        if ($prtExists.id) {
            if (!$prtExists.synced) {
                $resource_uri = ('/organizations/{0}/relationships/configurations/{1}' -f $ITGlueOrgID, $prtExists.id)
                $prt_rest = RestOp -data $prt_body -method 'PATCH' -resource_url $resource_uri
            } else {
                $prt_rest.data.id = $prtExists.id
            }
        } else {
            $prt_rest = RestOp -data $prt_body -method 'POST' -resource_url ('/organizations/{0}/relationships/configurations' -f $ITGlueOrgID)
        }
        $prtConfigID = $prt_rest.data.id
        sysLog -category "MESSAGE" -display $true -message "Printer $($printer.Name) has been uploaded to IT-Glue with id $prtConfigID."
        $port = gwmi Win32_TCPIPPrinterPort | Where-Object {$_.Name -eq $printer.PortName} | Select-Object Name,HostAddress
        sysLog -category "MESSAGE" -display $true -message "Shared printer $($printer.Name) on port $($port.Name)."
        $isIP = if ($port.Description -eq "Standard TCP/IP Port") {$isISP = ',"'+$itgFields_Printing.ipaddress+'": "' + $port.HostAddress + '"'} else {$isISP = ""}
        $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_Printing
        $existing = Get-ITGFlexSearch -GetName $printer.Name -AssetType $assettypeid
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_Printing.sharename+'": "'+($printer.Name)+'","'+$itgFields_Printing.location+'": ['+($Global:ITGlue_LocID)+'],"'+$itgFields_Printing.servers+'": ['+($Global:sysID)+'],"'+$itgFields_Printing.printers+'": ['+($prtConfigID)+'],"'+$itgFields_Printing.published+'": "'+($printer.Published)+'"'+$isIP+'}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
        }
        sysLog -category "MESSAGE" -display $true -message "Shared printer $($printer.Name) has been uploaded to IT-Glue with id $($rest_cr.data.id)."
    }
}
function Upload-AD {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading Active Directory Info to IT-Glue ---"
    Try {
        Import-Module ActiveDirectory
    } catch {
        sysError -errmsg "Unable to load Active Directory Powershell Module."
    }
    $adForest = Get-ADForest
    $assettypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_ActiveDirectory)
    if ($Global:sysFQDN -eq $adForest.SchemaMaster) {
        $ADFunctionalLevel = ''
        switch($adForest.ForestMode) {
            Windows2000Forest   {$ADFunctionalLevel = "2000"}
            Windows2003Forest   {$ADFunctionalLevel = "2003"}
            Windows2008Forest   {$ADFunctionalLevel = "2008"}
            Windows2008R2Forest {$ADFunctionalLevel = "2008 R2"}
            Windows2012Forest   {$ADFunctionalLevel = "2012"}
            Windows2012R2Forest {$ADFunctionalLevel = "2012 R2"}
            Windows2016Forest   {$ADFunctionalLevel = "2016"}
        }

        $itgname = $adForest.Name + " " + $adForest.Name.split(".")[0]
        $existing = Get-ITGFlexSearch -GetName $itgname -AssetType $assettypeid
        sysLog -category "MESSAGE" -display $true -message "Found Active Directory Domain $itgname running $ADFunctionalLevel functionality level."
        $adservers = ""
        $remadfromname = "." + $adForest.Name
        foreach ($adserver in $adForest.GlobalCatalogs) {
            $adconfigid = Get-ITGConfigID -GetName $adserver
            $adconfigidalt = Get-ITGConfigID -GetName $($adserver -replace $remadfromname, "")
            if ($adconfigid.id) {
                if ($adservers) {
                    $adservers = $adservers + "," + $adconfigid.id
                } else {
                    $adservers = $adconfigid.id
                }
            } else {
                if ($adconfigidalt.id) {
                    if ($adservers) {
                        $adservers = $adservers + "," + $adconfigidalt.id
                    } else {
                        $adservers = $adconfigidalt.id
                    }
                } else {
                    sysLog -category "ADUPLOAD" -display $true -message "Missing configuration in IT-Glue for AD Server named $adserver."
                }
            }
        }
        $addhcp = ""
        If (Get-Command Get-DhcpServerinDC -ErrorAction SilentlyContinue) {
            $dhcpservers = Get-DhcpServerinDC | Select DnsName
            foreach ($dhcpserver in $dhcpservers) {
                $dhcpconfigid = Get-ITGConfigID -GetName $dhcpserver
                $dhcpconfigidalt = Get-ITGConfigID -GetName $($dhcpserver -replace $remadfromname, "")
                if ($dhcpconfigid.id) {
                    if ($addhcp) {
                        $addhcp = $addhcp + "," + $dhcpconfigid.id
                    } else {
                        $addhcp = $dhcpconfigid.id
                    }
                } else {
                    if ($dhcpconfigidalt.id) {
                        if ($addhcp) {
                            $addhcp = $addhcp + "," + $dhcpconfigidalt.id
                        } else {
                            $addhcp = $dhcpconfigidalt.id
                        }
                    } else {
                        sysLog -category "ADUPLOAD" -display $true -message "Missing configuration in IT-Glue for DHCP Server named $dhcpserver."
                    }
                }
            }
            if ($addhcp -eq 0) { $addhcp = "" }
        } else {
            sysLog -category "ADUPLOAD" -display $true -message "DHCP Role and CMDLET not available."
        }

        $opsmst = Get-ADDomainController -Filter * | Select-Object Name, Domain, Forest, OperationMasterRoles | Where-Object {$_.OperationMasterRoles}
        $notes = "$($opsmst.Name): $($opsmst.OperationMasterRoles -join ', ')"
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_ActiveDirectory.shortname+'": "'+($adForest.Name.split(".")[0])+'","'+$itgFields_ActiveDirectory.fullname+'": "'+($adForest.Name)+'","'+$itgFields_ActiveDirectory.servers+'": ['+($adservers)+'],"'+$itgFields_ActiveDirectory.adlevel+'":"'+$ADFunctionalLevel+'","'+$itgFields_ActiveDirectory.dhcpservers+'": ['+($addhcp)+'],"'+$itgFields_ActiveDirectory.notes+'":"'+$notes+'"}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
            $rest_rtn = $existing
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
            $rest_rtn = $rest_cr.data.id
        }
        if ($itgAsset_ADGroups -ne '') {Upload-AdGroups}
        if ($itgAsset_GPOs -ne '') {Upload-GPOs}
        if ($itgAsset_ADPasswordPolicy -ne '') {Upload-ADPasswordPolicy -domain $rest_rtn}
    } else {
        sysLog -category "ADUPLOAD" -display $true "Aborted Active Directory Upload - not Schema Master."
    }
}
function Upload-ADGroups {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading AD Security Groups to IT-Glue ---"
    $assettypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_ADGroups)
    $adgroups = Get-ADGroup -Filter * | Where GroupCategory -eq 'Security'
    foreach($adgroup in $adgroups) {
        sysLog -category "MESSAGE" -display $true -message "Uploading AD Security Group $($adgroup.Name)"
        Try {
            $admembers = Get-ADGroupMember -Identity $adgroup.SID | Where-Object {$_.objectClass -eq "user"}
        } Catch {
            $admembers = $null
        }
        $members = ""
        $notfound = ""
        foreach($admember in $admembers) {
            $contactid = Get-ITGContact -GetName $admember.name
            if ($contactid) {
                if ($members) {
                    $members = $members + ',' + $contactid
                } else {
                    $members = $contactid
                }
            } else {
                if ($notfound) {
                    $notfound = $notfound + ',' + $admember.name
                } else {
                    $notfound = $admember.name
                }
            }
        }
        Try {
            $adsgroups = Get-ADGroupMember -Identity $adgroup.SID.value | Where-Object {$_.objectClass -eq "group"}
        } Catch {
            $adsgroups = $null
        }
        $groups = ""
        foreach($adsgroup in $adsgroups) {
            $groupid = Get-ITGFlexSearch -GetName $adsgroup.Name -AssetType $assettypeid
            if ($groupid) {
                if ($groups) {
                    $groups = $groups + ',' + $groupid
                } else {
                    $groups = $groupid
                }
            } else {
                $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"name": "'+($adsgroup.Name)+'"}}}}'
                $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
                if ($groups) {
                    $groups = $groups + ',' + $rest_cr.data.id
                } else {
                    $groups = $rest_cr.data.id
                }
            }
        }
        $existing = Get-ITGFlexSearch -GetName $adgroup.Name -AssetType $assettypeid
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_ADGroups.name+'": "'+($adgroup.Name)+'","'+$itgFields_ADGroups.members+'":['+$members+'],"'+$itgFields_ADGroups.groups+'": ['+$groups+'],"'+$itgFields_ADGroups.missing+'": "'+$notfound+'"}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
        }
    }
    $existing = Get-ITGFlexSearch -GetName "Authenticated Users" -AssetType $assettypeid
    if (!$existing) {
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_ADGroups.name+'": "Authenticated Users"}}}}'
        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
    }
}
function Upload-GPOs {
    Add-Type -AssemblyName System.Web
    sysLog -category "MESSAGE" -display $true -message "--- Uploading GPO Information to IT-Glue ---"
    $assettypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_GPOs)
    $sectypeid = (Get-ITGFlexibleAssetTypeID -GetName $itgAsset_ADGroups)
    $gpos = Get-GPO -all
    foreach($gpo in $gpos) {
        Write-Host "`Uploading Group Policy Object $($gpo.DisplayName)"
        $result = Get-GPOReport -Guid $gpo.Id -ReportType Html
        $result = ConvertTo-Base64 -content $result
        if ($Global:sysOSVer.Major -lt 7 -and $Global:sysOSVer.Minor -lt 2) {
            $prms = (Get-GPPermissions -Guid $gpo.Id -All | Where Permission -eq GpoApply).Trustee
        } else {
            $prms = (Get-GPPermission -Guid $gpo.Id -All | Where Permission -eq GpoApply).Trustee
        }
        $secgrp = ''
        foreach($prm in $prms) {
            If ($prm.Name -ne $null) {
                $group = Get-ITGFlexSearch -GetName $prm.Name -AssetType $sectypeid
                if ($group) {
                    if ($secgrp -eq '') {
                        $secgrp = $group
                    } else {
                        $secgrp = $secgrp + "," + $group
                    }
                }
            }
        }
        $uploadFile = ',"'+$itgFields_GPOs.report+'": {"content": "'+$result+'","file_name": "gporeport.html"}'
        $existing = Get-ITGFlexSearch -GetName $gpo.DisplayName -AssetType $assettypeid
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_GPOs.name+'": "'+($gpo.DisplayName)+'","'+$itgFields_GPOs.notes+'": "GPO Status: '+($gpo.GpoStatus)+'","'+$itgFields_GPOs.groups+'":['+$secgrp+']'+$uploadFile+'}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
        }
    }
}
function Upload-Scopes {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading DHCP Scopes (LAN) to IT-Glue ---"
    if ($Global:sysOSVer.Major -lt 7 -and $Global:sysOSVer.Minor -lt 2) {
        sysLog -category "MESSAGE" -display $true -message "System is running Server 2008 or 2008R2 which does not support the DHCP Scope PowerShell Cmdlets. Unable to get Scope Info."
    } else {
        $scopes = Get-DhcpServerv4Scope
        foreach($scope in $scopes) {
            sysLog -category "MESSAGE" -display $true -message "Found DHCP Lan Scope called $($scope.Name) with a description of $($scope.description) and a subnet of $($scope.SubnetMask)"
            $name = $scope.Name
            $desc = $scope.description
            $subnet = Convert-Subnet -SubnetMask $scope.SubnetMask
            $iprange = $scope.scopeid.ToString() + "/" + $subnet.ToString()
            $itgname = $name+'-'+$desc
            $searchn = $name+' '+$iprange
            $gateway = (Get-DhcpServerv4OptionValue -ScopeId $scope.scopeid | Where-Object {$_.Name -eq 'Router'}).Value -join ', '
            $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_LANS
            $existing = Get-ITGLans -GetName $searchn
            $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_LANS.name+'": "'+$name+'","'+$itgFields_LANS.subnet+'": "'+$iprange+'","'+$itgFields_LANS.dhcpserver+'": ['+$Global:sysID+'],"'+$itgFields_LANS.dhcpscope+'": "'+$scope.StartRange+"-"+$scope.EndRange+'"}}}}'
            if ($existing) {
                $resource_uri = ('/flexible_assets/{0}' -f $existing)
                $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
            } else {
                $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
            }
        }
    }
}
function Upload-ISP {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading ISP Info to IT-Glue ---"
    $request = ''
    $url = "http://ipinfo.io/json"
    Try {
        $request = Invoke-RestMethod $url
    } Catch {
        $webreq = [System.Net.WebRequest]::Create($url)
        $webreq.Method = "GET"
        $resp = $webreq.GetResponse()
        $stream = $resp.GetResponseStream()
        $reader = New-Object System.IO.StreamReader $stream
        $request = ConvertFrom-Json20($reader.ReadToEnd())
    }
    $ipaddr = $request.ip -replace "`t|`n|`r",""
    $iphost = $request.hostname -replace "`t|`n|`r",""
    $iploc = $request.city + ', ' + $request.region + ' ' + $request.postal
    $iploc = $iploc -replace "`t|`n|`r",""
    $ipcord = $request.loc -replace "`t|`n|`r",""
    $ipisp = $request.org -replace "`t|`n|`r",""
    sysLog -category "MESSAGE" -display $true -message "ISP Provider is $ipisp with a public ip of $ipaddr and a hostname of $iphost."
    $ispdl = Speed-Test
    $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_WANS
    $existing = Get-ITGFlexSearch -GetName $ipisp -AssetType $assettypeid -filter $itgFields_WANS.provider
    $linktype = 'Other'
    If ($existing) {
        $details = Get-ITGFlexDetails -ID $existing -AssetType $assettypeid
        $ipaddr = dataAppend -originalString $details.traits.'ip-address-es' -newString $ipaddr
        $linktype = $details.traits.'link-type'
    }
    $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_WANS.provider+'": "'+$ipisp+'","'+$itgFields_WANS.location+'": ['+($Global:ITGlue_LocID)+'],"'+$itgFields_WANS.download+'": "'+$ispdl+'","'+$itgFields_WANS.linktype+'": "'+$linktype+'","'+$itgFields_WANS.publicip+'": "'+$ipaddr+'"}}}}'
    if ($existing) {
        $resource_uri = ('/flexible_assets/{0}' -f $existing)
        $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
    } else {
        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
    }
}
function Upload-Bitlocker {
    sysLog -category "MESSAGE" -display $true -message "--- Uploading Bitlocker Info to IT-Glue ---"
    $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_Bitlocker
    $volumes = Get-BitLockerVolume | Where ProtectionStatus -ne 'Off'
    foreach ($volume in $volumes) {
        $name = "$Global:sysName - $($volume.MountPoint)"
        sysLog -category "MESSAGE" -display $true -message "Uploading Bitlocker Info for $name"
        $existing = Get-ITGFlexSearch -GetName $name -AssetType $assettypeid
        $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_BitLocker.mountpoint+'": "'+$name+'","'+$itgFields_BitLocker.volumetype+'": "'+$($volume.VolumeType)+'","'+$itgFields_BitLocker.autounlock+'": "'+$($volume.AutoUnlockEnabled)+'","'+$itgFields_BitLocker.password+'": "'+$($volume.KeyProtector.recoverypassword)+'","'+$itgFields_BitLocker.computer+'": ['+$Global:sysID+']}}}}'
        if ($existing) {
            $resource_uri = ('/flexible_assets/{0}' -f $existing)
            $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
        } else {
            $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
        }
    }
}
function Upload-ADPasswordPolicy {
    param(
        [Parameter(Mandatory = $true)]$domain
    )
    sysLog -category "MESSAGE" -display $true -message "--- Uploading AD Password Policy to IT-Glue ---"
    $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_ADPasswordPolicy
    $policy = Get-ADDefaultDomainPasswordPolicy
    $name = "Default Password Policy"
    $maxage = ($policy.MaxPasswordAge).Days
    $minage = ($policy.MinPasswordAge).Days
    $existing = Get-ITGFlexSearch -GetName $name -AssetType $assettypeid -filter $itgFields_ADPasswordPolicy.name
    $complex = 'true'
    if ($policy.ComplexityEnabled -eq 'False') {$complex = 'false'}
    sysLog -category "MESSAGE" -display $true -message "Uploading $name Password Policy for domain with complexity requirements as $complex, ages $minage - $maxage and minimum length $($policy.MinPasswordLength)."
    $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_ADPasswordPolicy.name+'": "'+$name+'","'+$itgFields_ADPasswordPolicy.domain+'": ['+$domain+'],"'+$itgFields_ADPasswordPolicy.complexity+'": '+$complex+',"'+$itgFields_ADPasswordPolicy.maxage+'": "'+$maxage+'","'+$itgFields_ADPasswordPolicy.minage+'": "'+$minage+'","'+$itgFields_ADPasswordPolicy.minlength+'": "'+$($policy.MinPasswordLength)+'","'+$itgFields_ADPasswordPolicy.historycount+'": "'+$($policy.PasswordHistoryCount)+'","'+$itgFields_ADPasswordPolicy.maxtrys+'": "'+$($policy.LockoutThreshold)+'","'+$itgFields_ADPasswordPolicy.lockout+'": "'+$($policy.LockoutDuration)+'"}}}}'
    if ($existing) {
        $resource_uri = ('/flexible_assets/{0}' -f $existing)
        $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
    } else {
        $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
    }
}
function Upload-WindowsKey {
    sysLog -category "MESSAGE" -display $true -message "---Uploading Windows License Key---"
    $winver = [environment]::OSVersion.Version
    if ($winver.Major.ToInt16($null) -ge 6) {
        $wmi = [WMIClass]"\\$env:COMPUTERNAME\root\default:stdRegProv"
	    $Object = $wmi.GetBinaryValue(2147483650,"Software\Microsoft\Windows NT\CurrentVersion","DigitalProductId")
	    [Array]$DigitalIDvalue = $Object.uValue
        if ($DigitalIDvalue) {
            $ProductName = (Get-itemproperty -Path "HKLM:Software\Microsoft\Windows NT\CurrentVersion" -Name "ProductName").ProductName 
		    $ProductID =  (Get-itemproperty -Path "HKLM:Software\Microsoft\Windows NT\CurrentVersion" -Name "ProductId").ProductId
		    $LicenseKey = ConvertTokey $DigitalIDvalue
            if ($LicenseKey) {
                sysLog -category "MESSAGE" -display $true -message "Successfully found and decoded license key for $ProductName."
                $assettypeid = Get-ITGFlexibleAssetTypeID -GetName $itgAsset_Licenses
                $name = "$Global:sysName - $ProductName"
                $search = "Microsoft $name $($winver.ToString())"
                $notes = "Product ID: $ProductID"
                $existing = Get-ITGFlexSearch -GetName $search -AssetType $assettypeid -filter $itgFields_Licenses.name
                $rest_body = '{"data":{"type": "flexible-assets","attributes": {"organization-id": '+$ITGlueOrgID+',"flexible-asset-type-id": '+$assettypeid+',"traits": {"'+$itgFields_Licenses.manufacturer+'": "Microsoft","'+$itgFields_Licenses.name+'": "'+$name+'","'+$itgFields_Licenses.version+'": "'+$($winver.ToString())+'","'+$itgFields_Licenses.license+'": "'+$licensekey+'","'+$itgFields_Licenses.notes+'": "'+$notes+'"}}}}'
                if ($existing) {
                    $resource_uri = ('/flexible_assets/{0}' -f $existing)
                    $rest_cr = RestOp -data $rest_body -method 'PATCH' -resource_url $resource_uri
                } else {
                    $rest_cr = RestOp -data $rest_body -method 'POST' -resource_url '/flexible_assets/'
                }
            } else {
                sysLog -category "MESSAGE" -display $true -message "Failed to decode Windows License key."
            }
        } else {

        }
    } else {
        sysLog -category "MESSAGE" -display $true -message "Unable to obtain license keys for this version of Windows."
    }
}

#Pre-Check Validation
sysLog -category "MESSAGE" -message "Starting IT-Glue Documentation Script at $(Get-Date)" -display $true
if ($input_APIKey -eq '') {sysError -errmsg "Missing Required API Key.";break}
if ($input_OrgID -eq '') {sysError -errmsg "Missing Required OrgID.";break}

#IT-Glue Validation
$ITGlue_OrgName = validateOrgID
if ($ITGlue_OrgName) {sysLog -category "MESSAGE" -display $true -message "Found IT-Glue Organization $ITGlue_OrgName with ID $input_OrgID."} else {sysError -errmsg "Unable to find IT-Glue Organization with ID $input_OrgID.";break} 
$ITGlue_LocID = getMainLocationID
if ($ITGlue_LocID) {sysLog -category "MESSAGE" -display $true -message  "Found IT-Glue Organization $ITGlue_OrgName main location ID $ITGlue_LocID."} else {sysError -errmsg "Unable to find IT-Glue Organization's main location.";break} 
$ITGlue_CfgStatID = Get-ITGConfigStatusID -GetName $itgFields_ConfigStatus
if ($ITGlue_CfgStatID) {sysLog -category "MESSAGE" -display $true -message  "Set default configuration status $itgFields_ConfigStatus id $ITGlue_CfgStatID"} else {sysError -errmsg "Unable to find IT-Glue Configuration Status $input_ConfigStatus.";break} 
if($itgAsset_FileShares){if((validateFlexibleAssetFields -fields $itgFields_FileShares -assetname $itgAsset_FileShares) -ne $null) {break}}
if($itgAsset_ActiveDirectory){if((validateFlexibleAssetFields -fields $itgFields_ActiveDirectory -assetname $itgAsset_ActiveDirectory) -ne $null) {break}}
if($itgAsset_Printing){if((validateFlexibleAssetFields -fields $itgFields_Printing -assetname $itgAsset_Printing) -ne $null) {break}}
if($itgAsset_LANS){if((validateFlexibleAssetFields -fields $itgFields_LANS -assetname $itgAsset_LANS) -ne $null) {break}}
if($itgAsset_WANS){if((validateFlexibleAssetFields -fields $itgFields_WANS -assetname $itgAsset_WANS) -ne $null) {break}}
if($itgAsset_Applications){if((validateFlexibleAssetFields -fields $itgFields_Applications -assetname $itgAsset_Applications) -ne $null) {break}}
if($itgAsset_ADGroups){if((validateFlexibleAssetFields -fields $itgFields_ADGroups -assetname $itgAsset_ADGroups) -ne $null) {break}}
if($itgAsset_GPOs){if((validateFlexibleAssetFields -fields $itgFields_GPOs -assetname $itgAsset_GPOs) -ne $null) {break}}
if($itgAsset_Bitlocker){if((validateFlexibleAssetFields -fields $itgFields_Bitlocker -assetname $itgAsset_Bitlocker) -ne $null) {break}}
if($itgAsset_ADPasswordPolicy){if((validateFlexibleAssetFields -fields $itgFields_ADPasswordPolicy -assetname $itgAsset_ADPasswordPolicy) -ne $null) {break}}

#Process Documentation
$sysOSVer = [System.Environment]::OSVersion.Version
$adID = 0
$sysName = ''
$sysMft = ''
$sysMftID = 0
$sysMod = ''
$sysModID = 0
$sysOS = ''
$sysSerial = ''
$sysFQDN = (Get-WmiObject win32_computersystem).DNSHostName+"."+(Get-WmiObject win32_computersystem).Domain
$sysServer = $true
$sysType = "Server"
$sysTypeID = 0
$orgContacts = ""
$sysID = Upload-Config
if ($sysID) {
    Upload-WindowsKey
    Upload-FileShares
    Upload-LocalPrinters
    if ($sysServer -eq $true) {
        Import-Module ServerManager
        $rolePrint = Get-WindowsFeature Print* | Where-Object {$_.Name -contains "Print-Services"} | Select-Object Installed
        if ($rolePrint.Installed -eq "True") {Upload-Printers}
        $roleAD = Get-WindowsFeature AD-Domain*| Where-Object {$_.Name -contains "AD-Domain-Services"} | Select-Object Installed
        if ($roleAD.Installed -eq "True") {Upload-AD}
        $roleDHCP = Get-WindowsFeature DHCP* | Where-Object {$_.Name -contains "DHCP"} | Select-Object Installed
        if ($roleDHCP.Installed -eq "True") {Upload-Scopes}
        $roleBitlocker = Get-WindowsFeature Bitlocker* | Where-Object {$_.Name -contains "Bitlocker"} | Select-Object Installed
        if ($roleBitlocker.Installed -eq "True" -and $itgAsset_BitLocker -ne "") {Upload-Bitlocker}
        Upload-ISP
    }
    Upload-Software
} else {
    sysLog -category "ERROR" -display $true -message "Failed to create or retrieve the configuration data for the system."
    break
}
sysLog -category "MESSAGE" -message "IT-Glue Documentation Script has finished at $(Get-Date)" -display $true
